#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Jan  3 16:37:19 2011

import wx

# begin wxGlade: extracode
# end wxGlade

import nltk
import random

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.lbl_description = wx.StaticText(self, -1, "Witness the awesome might of the Report Stupiderizer! It will, if allowed, to randomize word order, \nswap prepositions for inappropriate ones, and do thesaurus switch-a-roos of verbs. Check it out!", style=wx.ALIGN_CENTRE)
        self.btn_verbage = wx.Button(self, -1, "Swap Verbage")
        self.btn_prepositions = wx.Button(self, -1, "Exchange Prepositions")
        self.btn_scramble = wx.Button(self, -1, "Scramble Word Order")
        self.btn_conjunction = wx.Button(self, -1, "Conjunction Dysfunction")
        self.btn_reversal = wx.Button(self, -1, "Sentence Reversal")
        self.txt_report = wx.TextCtrl(self, -1, "Paste any text you desire to make stupid here.", style=wx.TE_MULTILINE|wx.TE_RICH|wx.TE_RICH2|wx.TE_WORDWRAP)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnSwapVerbage, self.btn_verbage)
        self.Bind(wx.EVT_BUTTON, self.OnExchangePrep, self.btn_prepositions)
        self.Bind(wx.EVT_BUTTON, self.OnScrambleWords, self.btn_scramble)
        self.Bind(wx.EVT_BUTTON, self.OnConjunction, self.btn_conjunction)
        self.Bind(wx.EVT_BUTTON, self.OnSentenceReversal, self.btn_reversal)
        # end wxGlade
        
        # Load preposition lists for swapping things with
        prepfile = open('PrepositionList.txt','r')

        self.prepList = prepfile.read().split('\n')
        self.prepList = self.prepList[0:-1]
        self.prepLength = len(self.prepList) - 1
        
        # ---
        # Load the huge thesaurus into memory
        # ---
        

        # Show progress dialog saying we are grabbing contents from thesaurus
        dialog = wx.ProgressDialog("Loading Thesaurus","Please give us a moment to upload our thesaurus...",maximum=10)
        
        self.masterThesaurus = {}

        file = open("th_en_US_v2.dat", "r")

        doing = True

        # Remove the first header
        read = file.readline()
        
        dialog.Update(0)
        progressCounter = 0
        progressor = 0
        while doing:
            read = file.readline()
            
            if read == '':
                doing = False
            else:
                # Read the contents into my master thesaurus
                progressor += 1
                myWord, numWords = read.split('|')[0], int(read.split('|')[1])
                
                newList = []
                
                for word in range(numWords):
                    newWords = file.readline()
                    newWords = newWords.split("|")
                    newWords = newWords[1:]
                    
                    # Clean every one of its subwords for explanatory thingies
                    for i in range(len(newWords)):
                        newWords[i] = newWords[i].replace("(generic term)", "")
                        newWords[i] = newWords[i].replace("(similar term)", "")
                        newWords[i] = newWords[i].replace("(related term)", "")
                        newWords[i] = newWords[i].strip()
                        
                        # After being cleaned, be added to the list
                        newList.append(newWords[i])
                    
                # Append it to the master thesaurus
                self.masterThesaurus[myWord] = list(newList)
                
                # Update the progress dialog
                if progressor > 14581:
                    progressCounter += 1
                    progressor = 0
                    print progressCounter
                    dialog.Update(progressCounter)
                
        # Say that we are done
        dialog.Update(10)
        
        dialog.Destroy()
        
    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Report Stupiderizer")
        self.txt_report.SetMinSize((-1, 500))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.lbl_description, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 5)
        sizer_2.Add(self.btn_verbage, 0, wx.ALL, 5)
        sizer_2.Add(self.btn_prepositions, 0, wx.ALL, 5)
        sizer_2.Add(self.btn_scramble, 0, wx.ALL, 5)
        sizer_2.Add(self.btn_conjunction, 0, wx.ALL, 5)
        sizer_2.Add(self.btn_reversal, 0, wx.ALL, 5)
        sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
        sizer_1.Add(self.txt_report, 0, wx.LEFT|wx.RIGHT|wx.EXPAND, 5)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def OnSwapVerbage(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnSwapVerbage' not implemented"
        event.Skip()

    def OnExchangePrep(self, event): # wxGlade: MyFrame.<event_handler>
        print "Exchanging prepositions now!"
        
        # Start by tokenizing the text
        text = nltk.word_tokenize(self.txt_report.GetValue())
        
        # Clean the tokens of falsely placed periods (if it finds one at the end,
        # remove the period and insert it directly after the word as its own token)
        i = 0
        done = False
        while not done:
            if text[i].endswith('.') and not (text[i] == '.'):
                text[i] = text[i].replace('.','')
                text.insert(i + 1,'.')
            i += 1
            if i >= len(text):
                done = True
        
        # Now do part-of-speech tagging to the tokens
        tags = nltk.pos_tag(text)
        
        # Go through all of the tokens and search for prepositions, which then
        # replace with something random
        for i in range(len(tags)):
            if tags[i][1] == 'IN':
                
                # Replace the word with a random selection from the preposition list
                tags[i] = (self.prepList[random.randint(0,self.prepLength)],"IN")
                
            
        # Combine the tokens back together into the sentence
        combosentence = ''
        for word in tags:
            combosentence = combosentence + word[0] + ' '
            
        self.txt_report.SetValue(combosentence)

    def OnScrambleWords(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnScrambleWords' not implemented"
        event.Skip()

    def OnConjunction(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnConjunction' not implemented"
        event.Skip()

    def OnSentenceReversal(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnSentenceReversal' not implemented"
        
        self.SplitSentences()
    
    def SplitSentences(self):
        # Split the text along periods, tabs, and newlines so as to have the
        # ability to recombine the text in the same format as before.
        
        textlist = self.txt_report.GetValue().split('\n')
        
        print textlist
# end of class MyFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_main = MyFrame(None, -1, "")
    app.SetTopWindow(frame_main)
    frame_main.Show()
    app.MainLoop()
